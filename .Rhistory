# Checa a Nacionalidade do jogador e atribui o continente de acordo com o que acha dentro das listas dos continentes
df$continent[df$continent %in% Africa ] <- "Africa"
df$continent[df$continent %in% Antarctica ] <- "Antarctica"
df$continent[df$continent %in% Asia ] <- "Asia"
df$continent[df$continent %in% Europe ] <- "Europe"
df$continent[df$continent %in% North_america ] <- "North_america"
df$continent[df$continent %in% South_america ] <- "South_america"
df <- read_csv("/home/pedro/Desktop/fifa18-data-analysis/data/fifa18.csv")
setDT(df) # transforma o dataframe em datatable
Africa <- c('Algeria','Angola','Benin','Botswana','Burkina','Burundi','Cameroon','Cape Verde','Central African Republic','Chad','Comoros','Congo','Congo Democratic Republic of','Djibouti','Egypt','Equatorial Guinea','Eritrea','Ethiopia','Gabon','Gambia','Ghana','Guinea','Guinea-Bissau','Ivory Coast','Kenya','Lesotho','Liberia','Libya','Madagascar','Malawi','Mali','Mauritania','Mauritius','Morocco','Mozambique','Namibia','Niger','Nigeria','Rwanda','Sao Tome and Principe','Senegal','Seychelles','Sierra Leone','Somalia','South Africa','South Sudan','Sudan','Swaziland','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe','Burkina Faso')
Antarctica <- c('Fiji','Kiribati','Marshall Islands','Micronesia','Nauru','New Zealand','Palau','Papua New Guinea','Samoa','Solomon Islands','Tonga','Tuvalu','Vanuatu')
Asia <- c('Afghanistan','Bahrain','Bangladesh','Bhutan','Brunei','Burma (Myanmar)','Cambodia','China','East Timor','India','Indonesia','Iran','Iraq','Israel','Japan','Jordan','Kazakhstan','North Korea','South Korea','Kuwait','Kyrgyzstan','Laos','Lebanon','Malaysia','Maldives','Mongolia','Nepal','Oman','Pakistan','Philippines','Qatar','Russian Federation','Saudi Arabia','Singapore','Sri Lanka','Syria','Tajikistan','Thailand','Turkey','Turkmenistan','United Arab Emirates','Uzbekistan','Vietnam','Yemen','Russia')
Europe <- c('Albania','Andorra','Armenia','Austria','Azerbaijan','Belarus','Belgium','Bosnia and Herzegovina','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France','Georgia','Germany','Greece','Hungary','Iceland','Ireland','Italy','Latvia','Liechtenstein','Lithuania','Luxembourg','Macedonia','Malta','Moldova','Monaco','Montenegro','Netherlands','Norway','Poland','Portugal','Romania','San Marino','Scotland','Serbi','Slovakia','Slovenia','Spain','Sweden','Switzerland','Ukraine','England','Vatican City','Republic of Ireland','Wales')
North_america <- c('Antigua and Barbuda','Bahamas','Barbados','Belize','Canada','Costa Rica','Cuba','Dominica','Dominican Republic','El Salvador','Grenada','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Panama','Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Trinidad and Tobago','United States')
South_america <- c('Argentina','Bolivia','Brazil','Chile','Colombia','Ecuador','Guyana','Paraguay','Peru','Suriname','Uruguay','Venezuela')
df[, continent :=  df$nationality] # Cria a coluna 'continent' espelhando a coluna 'nationality'
df <- df %>%
relocate(continent, .after = nationality) # Move 'continent' para depois da coluna 'nationality'
df$continent[df$continent %in% Africa ] <- "Africa"
df$continent[df$continent %in% Antarctica ] <- "Antarctica"
df$continent[df$continent %in% Asia ] <- "Asia"
df$continent[df$continent %in% Europe ] <- "Europe"
df$continent[df$continent %in% North_america ] <- "North_america"
df$continent[df$continent %in% South_america ] <- "South_america"
world_map <- map_data("world")
numofplayers <- world_map %>%
mutate(region = as.character(region)) %>%
left_join((df %>% mutate(Nationality = as.character(Nationality),
Nationality = if_else(Nationality %in% "England",
"UK", Nationality)) %>%
#filter(League == "Bundesliga") %>%
count(Nationality, name = "Number of Player") %>%
rename(region = Nationality) %>%
mutate(region = as.character(region))), by = "region")
numofplayers <- world_map %>%
mutate(region = as.character(region)) %>%
left_join((df %>% mutate(nationality = as.character(nationality),
nationality = if_else(nationality %in% "England",
"UK", nationality)) %>%
count(nationality, name = "Número de jogadores") %>%
rename(region = nationality) %>%
mutate(region = as.character(region))), by = "region")
View(numofplayers)
ggplot(numofplayers, aes(long, lat, group = group))+
geom_polygon(aes(fill = `Number of Player` ), color = "white", show.legend = FALSE)+
scale_fill_viridis_c(option = "C")+
theme_void()+
labs(fill = "Number of Player",
title = "Number of Player with ggplot2")
ggplot(numofplayers, aes(long, lat, group = group))+
geom_polygon(aes(fill = `Número de jogadores` ), color = "white", show.legend = FALSE)+
scale_fill_viridis_c(option = "C")+
theme_void()+
labs(fill = "Número de jogadores",
title = "Número de jogadores")
df <- read_csv("/home/pedro/Desktop/fifa18-data-analysis/data/fifa18.csv")
setDT(df) # transforma o dataframe em datatable
Africa <- c('Algeria','Angola','Benin','Botswana','Burkina','Burundi','Cameroon','Cape Verde','Central African Republic','Chad','Comoros','Congo','Congo Democratic Republic of','Djibouti','Egypt','Equatorial Guinea','Eritrea','Ethiopia','Gabon','Gambia','Ghana','Guinea','Guinea-Bissau','Ivory Coast','Kenya','Lesotho','Liberia','Libya','Madagascar','Malawi','Mali','Mauritania','Mauritius','Morocco','Mozambique','Namibia','Niger','Nigeria','Rwanda','Sao Tome and Principe','Senegal','Seychelles','Sierra Leone','Somalia','South Africa','South Sudan','Sudan','Swaziland','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe','Burkina Faso')
Antarctica <- c('Fiji','Kiribati','Marshall Islands','Micronesia','Nauru','New Zealand','Palau','Papua New Guinea','Samoa','Solomon Islands','Tonga','Tuvalu','Vanuatu')
Asia <- c('Afghanistan','Bahrain','Bangladesh','Bhutan','Brunei','Burma (Myanmar)','Cambodia','China','East Timor','India','Indonesia','Iran','Iraq','Israel','Japan','Jordan','Kazakhstan','North Korea','South Korea','Kuwait','Kyrgyzstan','Laos','Lebanon','Malaysia','Maldives','Mongolia','Nepal','Oman','Pakistan','Philippines','Qatar','Russian Federation','Saudi Arabia','Singapore','Sri Lanka','Syria','Tajikistan','Thailand','Turkey','Turkmenistan','United Arab Emirates','Uzbekistan','Vietnam','Yemen','Russia')
Europe <- c('Albania','Andorra','Armenia','Austria','Azerbaijan','Belarus','Belgium','Bosnia and Herzegovina','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France','Georgia','Germany','Greece','Hungary','Iceland','Ireland','Italy','Latvia','Liechtenstein','Lithuania','Luxembourg','Macedonia','Malta','Moldova','Monaco','Montenegro','Netherlands','Norway','Poland','Portugal','Romania','San Marino','Scotland','Serbi','Slovakia','Slovenia','Spain','Sweden','Switzerland','Ukraine','England','Vatican City','Republic of Ireland','Wales')
North_america <- c('Antigua and Barbuda','Bahamas','Barbados','Belize','Canada','Costa Rica','Cuba','Dominica','Dominican Republic','El Salvador','Grenada','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Panama','Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Trinidad and Tobago','United States')
South_america <- c('Argentina','Bolivia','Brazil','Chile','Colombia','Ecuador','Guyana','Paraguay','Peru','Suriname','Uruguay','Venezuela')
df[, continent :=  df$nationality] # Cria a coluna 'continent' espelhando a coluna 'nationality'
df <- df %>%
relocate(continent, .after = nationality) # Move 'continent' para depois da coluna 'nationality'
df$continent[df$continent %in% Africa ] <- "Africa"
df$continent[df$continent %in% Antarctica ] <- "Antarctica"
df$continent[df$continent %in% Asia ] <- "Asia"
df$continent[df$continent %in% Europe ] <- "Europe"
df$continent[df$continent %in% North_america ] <- "North_america"
df$continent[df$continent %in% South_america ] <- "South_america"
pais <- fifa18[,.N, by=nationality]
fr <- joinCountryData2Map(dF=pais, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",catMethod = "fixedWidth",
oceanCol = "steelblue1",missingCountryCol = "white",
mapTitle = "Jogadores por pais",
aspect = "variable")
library(rworldmap)
pais <- fifa18[,.N, by=nationality]
fr <- joinCountryData2Map(dF=pais, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",catMethod = "fixedWidth",
oceanCol = "steelblue1",missingCountryCol = "white",
mapTitle = "Jogadores por pais",
aspect = "variable")
plot_intro(fifa18)
plot_missing(fifa18)
pais <- df[,.N, by=nationality]
fr <- joinCountryData2Map(dF=pais, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",catMethod = "fixedWidth",
oceanCol = "steelblue1",missingCountryCol = "white",
mapTitle = "Jogadores por pais",
aspect = "variable")
plot_intro(df)
plot_missing(df)
plot(df)
text(df)
summary(df)
View(df)
# Jogadores meio-campo (Center-mid) que atuam no continente europeu
MID_EUROPE <- df %>%
filter(Position == "Center-mid" & continent == "Europe")
# Dataframe para validação - Jogadores meio-campo que NÃO jogam na europa
MID_NOT_EUROPE <- df %>%
filter(Position == "Center-mid" & continent != "Europe")
# Trata os dados removendo valores NA e não numéricos para treinamento do modelo
MID_EUROPE <- MID_EUROPE %>%
select_if(~ !any(is.na(.))) %>%
select_if(~ any(is.numeric(.)))
fifa.18.cm <- MID_NOT_EUROPE %>%
select_if(~ !any(is.na(.))) %>%
select_if(~ any(is.numeric(.)))
# Boxplot dos valores de 'MID_EUROPE' ... Outliers no valor em euros
boxplot(MID_EUROPE)
corrMatrix <- cor(MID_EUROPE)
corrplot.mixed(corrMatrix,
lower = "ellipse",
upper = "number",
tl.pos = "lt",
tl.col = "black",
order="hclust",
hclust.method = "ward.D",
addrect = 3)
reg <- tree(data = MID_EUROPE, formula = eur_value ~ .)
plot(reg)
text(reg)
summary(reg)
View(reg)
set.seed(1)
reg.test <- randomForest(formula = eur_value ~ .,
data = MID_EUROPE,
ntree=100,
proximity=TRUE,
localImp=TRUE)
plot(reg.test)
predito = predict(reg.test, MID_EUROPE)
print(paste("R2: ", R2_Score(predito, MID_EUROPE$eur_value) ) )
print(paste("MSE: ", MSE(predito, MID_EUROPE$eur_value) ) )
MID_EUROPE[, predito:=predito]
MID_EUROPE <- MID_EUROPE %>% relocate(predito, .after = eur_value)
head(MID_EUROPE)
MID_EUROPE %>%
mutate(predito = predict(reg.test, .)) %>%
plot_ly(x = ~eur_value,
y= ~predito,
type='scatter',
mode='markers',
text=~paste0("Real value: ", currency(eur_value, symbol='€', digits = 0L),
"\nPredicted value: ", currency(predito, symbol='€', digits = 0L),
"\nError: ", (eur_value - predito)),
name="Dispersão") %>%
add_segments(x=0, y=0, xend = 80000000, yend = 80000000, name="Equilíbrio")
MID_EUROPE %>%
mutate(predito = predict(reg.test, .)) %>%
plot_ly(x = ~eur_value,
y= ~predito,
type='scatter',
mode='markers',
text=~paste0("Valor real: ", currency(eur_value, symbol='€', digits = 0L),
"\nValor predito: ", currency(predito, symbol='€', digits = 0L),
"\nErro: ", (eur_value - predito)),
name="Dispersão") %>%
add_segments(x=0, y=0, xend = 80000000, yend = 80000000, name="Equilíbrio")
predito = predict(reg.test, fifa.18.cm)
print(paste("R2: ", R2_Score(predito, fifa.18.cm$eur_value) ) )
print(paste("MSE: ", MSE(predito, fifa.18.cm$eur_value) ) )
fifa.18.cm[, predito:=predito]
fifa.18.cm <- fifa.18.cm %>% relocate(predito, .after = eur_value)
head(fifa.18.cm)
fifa.18.cm %>%
mutate(predito = predict(reg.test, .)) %>%
plot_ly(x = ~eur_value,
y= ~predito,
type='scatter',
mode='markers',
text=~paste0("Real value: ", currency(eur_value, symbol='€', digits = 0L),
"\nPredicted value: ", currency(predito, symbol='€', digits = 0L),
"\nError: ", (eur_value - predito)),
name="Dispersão") %>%
add_segments(x=0, y=0, xend = 60000000, yend = 60000000, name="Equilíbrio")
fifa.18.cm %>%
mutate(predito = predict(reg.test, .)) %>%
plot_ly(x = ~eur_value,
y= ~predito,
type='scatter',
mode='markers',
text=~paste0("Valor real: ", currency(eur_value, symbol='€', digits = 0L),
"\nValor predito: ", currency(predito, symbol='€', digits = 0L),
"\nErro: ", (eur_value - predito)),
name="Dispersão") %>%
add_segments(x=0, y=0, xend = 60000000, yend = 60000000, name="Equilíbrio")
output <- MID_NOT_EUROPE %>%
select(Position, name, eur_value)
output[, eur_value := currency(fifa.18.cm$eur_value, symbol = '€', digits = 0L)]
output[, 'Preço "Calculado" (€)' := currency(fifa.18.cm$predito, symbol = '€', digits = 0L)]
output[, 'Potencial Valorização (€)' := currency((fifa.18.cm$predito - fifa.18.cm$eur_value), symbol='€', digits = 0L) ]
output[, 'Potencial Valorização (%)' := (percent((fifa.18.cm$predito - fifa.18.cm$eur_value) / 100000000)) ]
output <- output %>%
rename(
'Posição' = Position,
'Jogador' = name,
'Preço de mercado' = eur_value
)
head(output)
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat= "count", fill= "red")
?geom_histogram
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "red",
bins = 30)
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "red",
bins = 100)
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "red",
)
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "red")
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "purple")
histogram <- plot_ly(x = ~overall,
type = "histogram")
histogram
histogram <- plot_ly(x = ~df,
type = "histogram")
histogram
histogram <- plot_ly(x = ~df.overall,
type = "histogram")
histogram
histogram <- plot_ly(x = ~df['overall'],
type = "histogram")
histogram
histogram <- plot_ly(x = ~df$overall,
type = "histogram")
histogram
df %>%
ggplot(aes(x = overall)) +
geom_histogram(stat = "count",
fill= "purple")
histogram <- plot_ly(x = ~df$overall,
type = "histogram")
histogram
histogram <- plot_ly(x = ~df$overall,
type = "histogram") %>%
layout(title = "Histograma por overall dos jogadores",
xaxis = list(title = "Overall",
zeroline = FALSE),
yaxis = list(title = "Quantidade",
zeroline = FALSE))
histogram
histogram <- plot_ly(x = ~df$overall,
type = "histogram",
marker = list(color = "lightgray",
line = list(color = "darkgray",
width = 2))) %>%
layout(title = "Histograma por overall dos jogadores",
xaxis = list(title = "Overall",
zeroline = FALSE),
yaxis = list(title = "Quantidade",
zeroline = FALSE))
histogram
histogram <- plot_ly(x = ~df$overall,
type = "histogram",
marker = list(color = "lightgray",
line = list(color = "darkgray",
width = 1))) %>%
layout(title = "Histograma por overall dos jogadores",
xaxis = list(title = "Overall",
zeroline = FALSE),
yaxis = list(title = "Quantidade",
zeroline = FALSE))
histogram
df %>%
count(nationality) %>%
formattable(align = 'l')
df %>%
count(club) %>%
formattable(align = 'l')
#B est players
df %>%
arrange(-overall) %>%
top_n(15, wt = overall) %>%
select(full_name, overall, club, eur_value, Position) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#B est players
df %>%
arrange(-overall) %>%
top_n(10, wt = overall) %>%
select(full_name, overall, club, eur_value, Position) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',
scrollX = TRUE,
autoWidth = TRUE))
#B est players
df %>%
arrange(-overall) %>%
top_n(20, wt = overall) %>%
select(full_name, overall, club, eur_value, Position) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',
scrollX = TRUE,
autoWidth = TRUE))
# Pega todos os jogadores meio-de-campo do nosso DF para criarmos uma variável de análise
center_mid_players <- df %>%
filter(Position == "Center-mid")
View(center_mid_players)
histogram <- plot_ly(x = ~center_mid_players$overall,
type = "histogram",
marker = list(color = "lightgray",
line = list(color = "darkgray",
width = 1))) %>%
layout(title = "Histograma por overall dos jogadores (Center-mid)",
xaxis = list(title = "Overall",
zeroline = FALSE),
yaxis = list(title = "Quantidade",
zeroline = FALSE))
histogram # Mostra o histograma
# Top 10 melhores jogadores da posição
center_mid_players %>%
arrange(-overall) %>%
top_n(10, wt = overall) %>%
select(full_name, overall, club, eur_value, Position) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',
scrollX = TRUE,
autoWidth = TRUE))
View(df)
df %>% group_by(league) %>% count(Position) %>%
ggplot(aes(league, n, fill = Position)) +
geom_col()+
coord_polar()+
scale_fill_ordinal()+
theme_minimal()+
labs(x = NULL, y = NULL)
center_mid_players %>% group_by(league) %>% count(Position) %>%
ggplot(aes(league, n, fill = Position)) +
geom_col()+
coord_polar()+
scale_fill_ordinal()+
theme_minimal()+
labs(x = NULL, y = NULL)
df %>%
group_by(league) %>%
summarise(Total.Value = sum(as.integer(eur_value), na.rm = TRUE)) %>%
ggplot(aes(reorder(League, Total.Value), Total.Value, fill = Total.Value))+
geom_col(show.legend = FALSE)+
coord_flip()+
theme_minimal()+
labs(x = NULL, y = "Market Values of rhe Leagues")+
scale_fill_gradient(low = "khaki", high = "seagreen")+
theme(axis.line.y = element_line(colour = "darkslategray"),
axis.ticks.x = element_line(colour = "darkslategray"))+
scale_y_continuous(labels = c("0 €", "2 Billion €", "4 Billion €", "6 Billion €"))
df %>%
group_by(league) %>%
summarise(Total.Value = sum(as.integer(eur_value), na.rm = TRUE)) %>%
ggplot(aes(reorder(league, Total.Value), Total.Value, fill = Total.Value))+
geom_col(show.legend = FALSE)+
coord_flip()+
theme_minimal()+
labs(x = NULL, y = "Market Values of rhe Leagues")+
scale_fill_gradient(low = "khaki", high = "seagreen")+
theme(axis.line.y = element_line(colour = "darkslategray"),
axis.ticks.x = element_line(colour = "darkslategray"))+
scale_y_continuous(labels = c("0 €", "2 Billion €", "4 Billion €", "6 Billion €"))
center_mid_players %>%
group_by(league) %>%
summarise(Total.Value = sum(as.integer(eur_value), na.rm = TRUE)) %>%
ggplot(aes(reorder(league, Total.Value), Total.Value, fill = Total.Value))+
geom_col(show.legend = FALSE)+
coord_flip()+
theme_minimal()+
labs(x = NULL, y = "Market Values of rhe Leagues")+
scale_fill_gradient(low = "khaki", high = "seagreen")+
theme(axis.line.y = element_line(colour = "darkslategray"),
axis.ticks.x = element_line(colour = "darkslategray"))+
scale_y_continuous(labels = c("0 €", "2 Billion €", "4 Billion €", "6 Billion €"))
df %>%
group_by(league) %>%
summarise(Total.Value = sum(as.integer(eur_value), na.rm = TRUE)) %>%
ggplot(aes(reorder(league, Total.Value), Total.Value, fill = Total.Value))+
geom_col(show.legend = FALSE)+
coord_flip()+
theme_minimal()+
labs(x = NULL, y = "Market Values of rhe Leagues")+
scale_fill_gradient(low = "khaki", high = "seagreen")+
theme(axis.line.y = element_line(colour = "darkslategray"),
axis.ticks.x = element_line(colour = "darkslategray"))+
scale_y_continuous(labels = c("0 €", "2 Billion €", "4 Billion €", "6 Billion €"))
# Limpa todas as variáveis existentes no nosso RStudio
rm(list=ls())
# Carrega todas as nossas bibliotecas necessárias para a análise do dataset
library(DBI)
library(readr)
library(dplyr)
library(plotly)
library(tree)
library(randomForest)
library(corrplot)
library(MLmetrics)
library(DT)
library(data.table)
library(formattable)
library(RPostgres)
library(ggplot2)
library(rworldmap)
options(scipen = 999, digits = 4, repr.plot.width = 12, repr.plot.height = 8)
# Carrega o nosso CSV
# O CSV foi gerado através de inner_joins das consultas do banco de dados cedido pelo do professor ... As tabelas utilizadas foram:
# 'futebol.players', 'futebol.habilities', 'futebol.features' e 'futebol.financial' e o resultado final é lido logo abaixo.
# Observação: É necessário alterar o path do read_csv para apontar corretamente o arquivo .csv de acordo com o seu S. O.
df <- read_csv("/home/pedro/Desktop/fifa18-data-analysis/data/fifa18.csv")
setDT(df) # transforma o dataframe em datatable
# Estatísticas básicas do nosso DF
summary(df)
# Pega todos os jogadores atacanter do nosso DF para criarmos uma variável de análise
forward_players <- df %>%
filter(Position == "Forward")
# Histograma de jogadores por overall
# Conseguimos identificar uma grande concentração de jogadores com overall entre 60 e 73
histogram <- plot_ly(x = ~forward_players$overall,
type = "histogram",
marker = list(color = "lightgray",
line = list(color = "darkgray",
width = 1))) %>%
layout(title = "Histograma por overall dos jogadores (Forward)",
xaxis = list(title = "Overall",
zeroline = FALSE),
yaxis = list(title = "Quantidade",
zeroline = FALSE))
histogram # Mostra o histograma
# Top 10 melhores jogadores da posição
forward_players %>%
arrange(-overall) %>%
top_n(10, wt = overall) %>%
select(full_name, overall, club, eur_value, Position) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',
scrollX = TRUE,
autoWidth = TRUE))
# Quantidade de jogadores por seus respectivos clubes do nosso DF (em tabela)
df %>%
count(club) %>%
formattable(align = 'l')
country <- center_mid_players[,.N, by = nationality]
fr <- joinCountryData2Map(dF = country, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",
catMethod = "fixedWidth",
oceanCol = "steelblue1",
missingCountryCol = "white",
mapTitle = "Quantidade de jogadores por país",
aspect = "variable")
country <- df[,.N, by = nationality]
fr <- joinCountryData2Map(dF = country, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",
catMethod = "fixedWidth",
oceanCol = "steelblue1",
missingCountryCol = "white",
mapTitle = "Quantidade de jogadores por país",
aspect = "variable")
# Análise da quantidade de jogadores (mapa de calor nos países) do nosso dataset
country <- df[,.N, by = nationality]
fr <- joinCountryData2Map(dF = country, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",
catMethod = "fixedWidth",
oceanCol = "steelblue1",
missingCountryCol = "white",
mapTitle = "Quantidade de jogadores por país",
aspect = "variable")
# Mostra o nosso gŕafico de jogadores por país
plot_intro(df)
plot_missing(df)
country <- df[,.N, by = nationality]
fr <- joinCountryData2Map(dF = country, joinCode = "NAME", nameJoinColumn = "nationality", verbose = F)
mapCountryData(mapToPlot = fr,nameColumnToPlot = "N",
catMethod = "fixedWidth",
oceanCol = "steelblue1",
missingCountryCol = "white",
mapTitle = "Quantidade de jogadores por país",
aspect = "variable")
plot_intro(df)
plot_missing(df)
# Quantidade de jogadores por nacionalidade do nosso DF (em tabela)
df %>%
count(nationality) %>%
formattable(align = 'l')
# Jogadores atacantes (Forward) que atuam no continente europeu
FORWARD_EUROPE <- df %>%
filter(Position == "Forward" & continent == "Europe")
# Dataframe para validação - Jogadores atacantes que NÃO jogam na europa
FORWARD_NOT_EUROPE <- df %>%
filter(Position == "Forward" & continent != "Europe")
# Trata os dados removendo valores NA e não numéricos para treinamento do modelo
FORWARD_EUROPE <- FORWARD_EUROPE %>%
select_if(~ !any(is.na(.))) %>%
select_if(~ any(is.numeric(.)))
fifa.18.fw <- FORWARD_NOT_EUROPE %>%
select_if(~ !any(is.na(.))) %>%
select_if(~ any(is.numeric(.)))
boxplot(FORWARD_EUROPE)
FORWARD_EUROPE <- df %>%
filter(Position == "Forward" & continent == "Europe")
# Dataframe para validação - Jogadores atacantes que NÃO jogam na europa
FORWARD_NOT_EUROPE <- df %>%
filter(Position == "Forward" & continent != "Europe")
